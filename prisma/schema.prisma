generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id         String   @id @default(uuid())
  username   String   @unique
  email      String   @unique
  firstName  String
  lastName   String
  avatar     String?
  bio        String?
  password   String?
  videos     Video[]
  comments   Comment[]
  likes      Like[]
  subscriptionsSubscribedTo Subscription[] @relation("subscribedTo")
  subscriptionsSubscribers  Subscription[] @relation("subscriber")
  views      VideoView[]
}

model Subscription {
  id              String   @id @default(uuid())
  subscriberId    String
  subscribedToId  String
  subscriber      User     @relation(fields: [subscriberId], references: [id], name: "subscriber")
  subscribedTo    User     @relation(fields: [subscribedToId], references: [id], name: "subscribedTo")
  createdAt       DateTime @default(now())
  @@unique([subscriberId, subscribedToId])
}

model Video {
  id          String   @id @default(uuid())
  title       String
  description String?
  videoLink   String?   @unique
  muxAssetId  String?
  muxPlayBackId String?
  muxUploadId String?
  resolution  String?
  status      VideoStatus @default(UPLOADING)
  thumbnail   String      @default("https://yourdomain.com/default-thumbnail.jpg")
  duration    BigInt?
  publishedAt DateTime @default(now())
  deletedAt   DateTime?
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  comments    Comment[]
  likes       Like[]
  views       VideoView[]
  viewCount   Int      @default(0)
  likeCount   Int      @default(0)

  @@index([userId])
}


model Comment {
  id          String   @id @default(uuid())
  comment     String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  videoId     String
  video       Video    @relation(fields: [videoId], references: [id])
}

model VideoView {
  id         String   @id @default(uuid())
  videoId    String
  video      Video    @relation(fields: [videoId], references: [id])
  userId     String?
  user       User?    @relation(fields: [userId], references: [id])
  viewedAt   DateTime @default(now())
}

model Like {
  id         String   @id @default(uuid())
  videoId    String
  video      Video    @relation(fields: [videoId], references: [id])
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  createdAt  DateTime @default(now())
  @@unique([videoId, userId])
}

enum VideoStatus {
  UPLOADING
  PROCESSING
  READY
  FAILED
}

